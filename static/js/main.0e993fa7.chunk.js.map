{"version":3,"sources":["components/NavBar.js","RenderSuggestions.js","App.js","index.js"],"names":["NavBar","handleSelectChange","className","onChange","label","value","RenderSuggestions","suggestions","clickSuggestion","slice","map","suggestion","index","onClick","key","App","currentSuggestion","useRef","fromText","useState","whichCurr","setWhichCurr","from","setFrom","to","setTo","pickedFrom","setPickedFrom","pickedTo","setPickedTo","toText","setToText","exchangeRate","setExchangeRate","Object","values","FiatData","allValues","setAllValues","setSuggestions","getKeyByValue","object","fiat","findIndex","val","CryptoData","keys","find","toggleRadio","useEffect","length","fromKey","toKey","fetch","method","headers","Accept","then","res","json","data","catch","error","console","log","Number","event","target","type","name","checked","ref","current","placeholder","e","words","replace","split","allWords","join","searchInput","RegExp","regex","sort","filter","match","style","marginRight","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"m1kGAGe,SAASA,EAAT,GAAyC,IAAvBC,EAAsB,EAAtBA,mBAC/B,OACE,oCACE,yBAAKC,UAAU,eACb,yBAAKA,UAAU,eACb,qDACA,4BAAQC,SAAUF,EAAoBG,MAAM,YAC1C,4BAAQC,MAAO,IAAf,QACA,4BAAQA,MAAO,IAAf,cCTG,SAASC,EAAT,GAA4D,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,gBAEpD,OACI,6BACA,4BACCD,EAAYE,MAAM,EAJV,IAImBC,KAAI,SAACC,EAAYC,GAAb,OAC5B,wBAAIC,QAAS,kBAAML,EAAgBG,IAAaG,IAAKF,EAAQ,IAAMD,GAAaA,Q,kBC8L7EI,MA/Lf,WACE,IAEMC,EAAoBC,mBACpBC,EAAWD,mBAJJ,EAOqBE,mBAAS,IAP9B,mBAONC,EAPM,KAOKC,EAPL,OAUWF,oBAAS,GAVpB,mBAUNG,EAVM,KAUAC,EAVA,OAWOJ,oBAAS,GAXhB,mBAWNK,EAXM,KAWFC,EAXE,OAcuBN,mBAAS,iBAdhC,mBAcNO,EAdM,KAcMC,EAdN,OAemBR,mBAAS,sBAf5B,mBAeNS,EAfM,KAeIC,EAfJ,OAkBeV,mBAAS,GAlBxB,mBAkBNW,EAlBM,KAkBEC,EAlBF,OAqB2BZ,qBArB3B,mBAqBNa,EArBM,KAqBQC,EArBR,OAwBqBd,mBAASe,OAAOC,OAAOC,IAxB5C,mBAwBNC,EAxBM,KAwBKC,EAxBL,OA2ByBnB,mBAAS,IA3BlC,mBA2BNZ,EA3BM,KA2BOgC,EA3BP,KAwDb,SAASC,EAAcnC,GACrB,IAAIoC,EACAC,EAAOR,OAAOC,OAAOC,GAIzB,OAFKK,GADuC,IAA5CC,EAAKC,WAAU,SAACC,GAAD,OAASA,IAAQvC,KAClB+B,EACAS,EACPX,OAAOY,KAAKL,GAAQM,MAAK,SAACjC,GAAD,OAAS2B,EAAO3B,KAAST,KAmC3D,SAAS2C,IACPzB,GAASD,GACTG,GAAOD,GAeT,OApFAyB,qBAAU,WACR,GAA0B,IAAtBvB,EAAWwB,QAAoC,IAApBtB,EAASsB,OAAc,CACpD,IAAIC,EAAUX,EAAcd,GACxB0B,EAAQZ,EAAcZ,GAE1ByB,MAAM,GAAD,OAlCQ,oCAkCR,0DAC0DF,EAD1D,wBACiFC,EADjF,mBAjCO,oBAmCV,CACEE,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACR,eAAgB,sBAInBC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACL3B,EACE2B,EAAK,mCAAmC,wBAG3CC,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,SAEjC,CAACpC,EAAYE,IAsChBqB,qBAAU,WACc,KAAtBgB,OAAO7C,GACHkB,EAAaJ,OAAOC,OAAOC,IAC3BE,EAAaJ,OAAOC,OAAOU,MAC9B,CAACzB,IAoBF,oCACE,kBAAC,EAAD,CAAQnB,mBAde,SAACiE,GAC1B7C,EAAa6C,EAAMC,OAAO9D,QAawBe,UAAWA,IAC3D,yBAAKlB,UAAU,OACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,qBACb,2BAAOA,UAAU,cACf,6BACE,2BACEkE,KAAK,QACLC,KAAK,UACLC,QAAShD,EACTnB,SAAU6C,IAEZ,2BAAItB,IAEN,2BAAO6C,IAAKrD,EAAUkD,KAAK,OAAOjE,SA1BlD,WACiC,KAA3Be,EAASsD,QAAQnE,MACnB0B,EAAU,GAEVA,EAAUC,EAAed,EAASsD,QAAQnE,WAwBhC,+BACE,2BACE+D,KAAK,QACLC,KAAK,UACLC,QAAS9C,EACTrB,SAAU6C,IAEZ,2BAAIpB,MAIV,yBAAK1B,UAAU,oBACb,2BACEqE,IAAKvD,EACLd,UAAU,SACVkE,KAAK,OACLK,YAAY,SACZtE,SArFd,SAAuBuE,GACrB,IAAMrE,EAAQqE,EAAEP,OAAO9D,MACvB,GAAIA,EAAM6C,OAAS,EAAG,CAEpB,IAEMyB,EAFctE,EAAMuE,QAAQ,uBAAwB,QAEhCC,MAAM,KAE1BC,EAAWH,EAAMI,KAAK,KACtBC,EACa,IAAjBL,EAAMzB,OACFyB,EACA,QAAUG,EAASF,QAAQ,IAAIK,OAAO,IAAK,KAAM,UAAY,IAC7DC,EAAQ,IAAID,OAAOD,EAAa,KACtCzC,EAAeF,EAAU8C,OAAOC,QAAO,SAACxC,GAAD,OAASA,EAAIyC,MAAMH,YAE1D3C,EAAe,OAuEP,yBAAKrC,UAAWK,EAAY2C,OAAS,EAAI,YAAc,MACrD,kBAAC5C,EAAD,CACEC,YAAaA,EACbC,gBAtEhB,SAAyBG,GACvB4B,EAAe,IACfvB,EAAkBwD,QAAQnE,MAAQM,MAuExB,yBAAKT,UAAWK,EAAY2C,OAAS,EAAI,cAAgB,MACvD,yBAAKhD,UAAU,kBACb,4BACEW,QAAS,WACHS,GACFK,EAAcX,EAAkBwD,QAAQnE,OACxCW,EAAkBwD,QAAQnE,MAAQ,KAElCwB,EAAYb,EAAkBwD,QAAQnE,OACtCW,EAAkBwD,QAAQnE,MAAQ,KAGtCH,UAAU,cAVZ,UAiBN,yBAAKA,UAAU,oBACb,wBAAIA,UAAU,SAASoF,MAAO,CAAEC,YAAa,SAC1CzD,GAEH,wBAAI5B,UAAU,UAAUsC,EAAcZ,UCxLpD4D,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.0e993fa7.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./NavBar.css\";\n\nexport default function NavBar({ handleSelectChange }) {\n  return (\n    <>\n      <div className=\"nav_section\">\n        <div className=\"nav_wrapper\">\n          <h2>Crypto/Fiat converter</h2>\n          <select onChange={handleSelectChange} label=\"Currency\">\n            <option value={20}>Fiat</option>\n            <option value={30}>Crypto</option>\n          </select>\n        </div>\n      </div>\n    </>\n  );\n}\n","import React from 'react'\n\nexport default function RenderSuggestions({suggestions, clickSuggestion}) {\n    const size = 20;\n    return (\n        <div>\n        <ul>\n        {suggestions.slice(0, size).map((suggestion, index) => \n            <li onClick={() => clickSuggestion(suggestion)} key={index + '_' + suggestion}>{suggestion}</li>\n        )}\n        </ul>\n        </div>\n    )\n}\n","import React, { useState, useEffect, useRef } from \"react\";\nimport \"./App.css\";\nimport NavBar from \"./components/NavBar\";\nimport RenderSuggestions from \"./RenderSuggestions\";\nimport FiatData from \"./data/currencies.json\";\nimport CryptoData from \"./data/cryptocurrencies.json\";\n\nfunction App() {\n  const BASE_URL = \"https://www.alphavantage.co/query\";\n  const API_KEY = \"VPN90NJ9XU0GAR3X\";\n  const currentSuggestion = useRef();\n  const fromText = useRef();\n\n  /** State for whether currency mode is fiat or crypto */\n  const [whichCurr, setWhichCurr] = useState(20);\n\n  /** States for whether user is typing in from or to field */\n  const [from, setFrom] = useState(true);\n  const [to, setTo] = useState(false);\n\n  /** States for which currencies are set to from and to fields */\n  const [pickedFrom, setPickedFrom] = useState(\"Bitcoin (BTC)\");\n  const [pickedTo, setPickedTo] = useState(\"Danish Krone (DKK)\");\n\n  /** State for the output */\n  const [toText, setToText] = useState(0);\n\n  /** State for the exchangerate from api fetch */\n  const [exchangeRate, setExchangeRate] = useState();\n\n  /** State to contain collection of fiat/crypto values */\n  const [allValues, setAllValues] = useState(Object.values(FiatData));\n\n  /** State for collection of displayed suggestion based on user input */\n  const [suggestions, setSuggestions] = useState([]);\n\n  /** Fetch data from Alphavantage RESTAPI */\n  useEffect(() => {\n    if (pickedFrom.length !== 0 && pickedTo.length !== 0) {\n      let fromKey = getKeyByValue(pickedFrom);\n      let toKey = getKeyByValue(pickedTo);\n\n      fetch(\n        `${BASE_URL}?function=CURRENCY_EXCHANGE_RATE&from_currency=${fromKey}&to_currency=${toKey}&apikey=${API_KEY}`,\n        {\n          method: \"GET\",\n          headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      )\n        .then((res) => res.json())\n        .then((data) => {\n          setExchangeRate(\n            data[\"Realtime Currency Exchange Rate\"][\"5. Exchange Rate\"]\n          );\n        })\n        .catch((error) => console.log(error));\n    }\n  }, [pickedFrom, pickedTo]);\n\n  /* Find a key by value from object. Fx getKeyByValue(cryptocurrencies, \"XTRABYTES\") = XBY */\n  function getKeyByValue(value) {\n    let object;\n    let fiat = Object.values(FiatData);\n    fiat.findIndex((val) => val === value) !== -1\n      ? (object = FiatData)\n      : (object = CryptoData);\n    return Object.keys(object).find((key) => object[key] === value);\n  }\n\n  /** Function to filter suggestion based on user input */\n  function onTextChanged(e) {\n    const value = e.target.value;\n    if (value.length > 0) {\n      // Escape bad chars\n      const escapeChars = value.replace(/[-\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n      // Split input into an array of substrings\n      const words = escapeChars.split(\" \");\n      // Regex (?=.*words). Will match next word if previous matches.\n      const allWords = words.join(\",\");\n      const searchInput =\n        words.length === 1\n          ? words\n          : \"(?=.*\" + allWords.replace(new RegExp(\",\", \"g\"), \")(?=.*\") + \")\";\n      const regex = new RegExp(searchInput, \"i\");\n      setSuggestions(allValues.sort().filter((val) => val.match(regex)));\n    } else {\n      setSuggestions([]);\n    }\n  }\n\n  function clickSuggestion(suggestion) {\n    setSuggestions([]);\n    currentSuggestion.current.value = suggestion;\n  }\n\n  useEffect(() => {\n    Number(whichCurr) === 20\n      ? setAllValues(Object.values(FiatData))\n      : setAllValues(Object.values(CryptoData));\n  }, [whichCurr]);\n\n  function toggleRadio() {\n    setFrom(!from);\n    setTo(!to);\n  }\n\n  const handleSelectChange = (event) => {\n    setWhichCurr(event.target.value);\n  };\n\n  function convertValue() {\n    if (fromText.current.value === \"\") {\n      setToText(0);\n    } else {\n      setToText(exchangeRate * fromText.current.value);\n    }\n  }\n\n  return (\n    <>\n      <NavBar handleSelectChange={handleSelectChange} whichCurr={whichCurr} />\n      <div className=\"app\">\n        <div className=\"app-container\">\n          <div className=\"app-wrapper\">\n            <div className=\"convert\">\n              <div className=\"convert-container\">\n                <label className=\"labelClass\">\n                  <div>\n                    <input\n                      type=\"radio\"\n                      name=\"convert\"\n                      checked={from}\n                      onChange={toggleRadio}\n                    />\n                    <p>{pickedFrom}</p>\n                  </div>\n                  <input ref={fromText} type=\"text\" onChange={convertValue} />\n                </label>\n                <label>\n                  <input\n                    type=\"radio\"\n                    name=\"convert\"\n                    checked={to}\n                    onChange={toggleRadio}\n                  />\n                  <p>{pickedTo}</p>\n                </label>\n              </div>\n            </div>\n            <div className=\"search_container\">\n              <input\n                ref={currentSuggestion}\n                className=\"search\"\n                type=\"text\"\n                placeholder=\"Search\"\n                onChange={onTextChanged}\n              />\n              <div className={suggestions.length > 0 ? \"container\" : null}>\n                <RenderSuggestions\n                  suggestions={suggestions}\n                  clickSuggestion={clickSuggestion}\n                />\n              </div>\n              <div className={suggestions.length > 0 ? \"hide-button\" : null}>\n                <div className=\"button-wrapper\">\n                  <button\n                    onClick={() => {\n                      if (from) {\n                        setPickedFrom(currentSuggestion.current.value);\n                        currentSuggestion.current.value = \"\";\n                      } else {\n                        setPickedTo(currentSuggestion.current.value);\n                        currentSuggestion.current.value = \"\";\n                      }\n                    }}\n                    className=\"button-css\"\n                  >\n                    Add\n                  </button>\n                </div>\n              </div>\n            </div>\n            <div className=\"output-container\">\n              <h1 className=\"output\" style={{ marginRight: \"10px\" }}>\n                {toText}\n              </h1>\n              <h1 className=\"output\">{getKeyByValue(pickedTo)}</h1>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}