{"version":3,"sources":["components/NavBar.js","RenderSuggestions.js","App.js","index.js"],"names":["NavBar","handleSelectChange","className","onChange","label","value","RenderSuggestions","suggestions","clickSuggestion","slice","map","suggestion","index","onClick","key","App","currentSuggestion","useRef","fromText","useState","whichCurr","setWhichCurr","from","setFrom","to","setTo","pickedFrom","setPickedFrom","pickedTo","setPickedTo","toText","setToText","exchangeRate","setExchangeRate","useEffect","length","fromKey","getKeyByValue","toKey","fetch","method","headers","Accept","then","res","json","data","catch","error","console","log","Object","values","FiatData","allValues","setAllValues","setSuggestions","object","fiat","findIndex","val","CryptoData","keys","find","toggleRadio","event","target","type","name","checked","ref","current","placeholder","e","words","replace","split","allWords","join","searchInput","RegExp","regex","sort","filter","match","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fda66f53.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./NavBar.css\";\n\nexport default function NavBar({ handleSelectChange }) {\n  return (\n    <>\n      <div className=\"nav_section\">\n        <div className=\"nav_wrapper\">\n          <h2>Crypto/Fiat converter</h2>\n          <select onChange={handleSelectChange} label=\"Currency\">\n            <option value={20}>Fiat</option>\n            <option value={30}>Crypto</option>\n          </select>\n        </div>\n      </div>\n    </>\n  );\n}\n","import React from 'react'\n\nexport default function RenderSuggestions({suggestions, clickSuggestion}) {\n    const size = 20;\n    return (\n        <div>\n        <ul>\n        {suggestions.slice(0, size).map((suggestion, index) => \n            <li onClick={() => clickSuggestion(suggestion)} key={index + '_' + suggestion}>{suggestion}</li>\n        )}\n        </ul>\n        </div>\n    )\n}\n","import React, { useState, useEffect, useRef } from \"react\";\nimport \"./App.css\";\nimport NavBar from \"./components/NavBar\";\nimport RenderSuggestions from \"./RenderSuggestions\";\nimport FiatData from \"./data/currencies.json\";\nimport CryptoData from \"./data/cryptocurrencies.json\";\n\nfunction App() {\n  const BASE_URL = \"https://www.alphavantage.co/query\";\n  const API_KEY = \"VPN90NJ9XU0GAR3X\";\n  const currentSuggestion = useRef();\n  const fromText = useRef();\n\n  const [whichCurr, setWhichCurr] = useState(20);\n  const [from, setFrom] = useState(true);\n  const [to, setTo] = useState(false);\n  const [pickedFrom, setPickedFrom] = useState(\"Bitcoin (BTC)\");\n  const [pickedTo, setPickedTo] = useState(\"Danish Krone (DKK)\");\n  const [toText, setToText] = useState(0);\n  const [exchangeRate, setExchangeRate] = useState();\n\n  useEffect(() => {\n    if (pickedFrom.length != 0 && pickedTo.length != 0) {\n      let fromKey = getKeyByValue(pickedFrom);\n      let toKey = getKeyByValue(pickedTo);\n\n      fetch(\n        `${BASE_URL}?function=CURRENCY_EXCHANGE_RATE&from_currency=${fromKey}&to_currency=${toKey}&apikey=${API_KEY}`,\n        {\n          method: \"GET\",\n          headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      )\n        .then((res) => res.json())\n        .then((data) => {\n          setExchangeRate(\n            data[\"Realtime Currency Exchange Rate\"][\"5. Exchange Rate\"]\n          );\n        })\n        .catch((error) => console.log(error));\n    }\n  }, [pickedFrom, pickedTo]);\n\n  const [allValues, setAllValues] = useState(Object.values(FiatData));\n  const [suggestions, setSuggestions] = useState([]);\n\n  /* Find a key by value from object. Fx getKeyByValue(cryptocurrencies, \"XTRABYTES\") = XBY */\n  function getKeyByValue(value) {\n    let object;\n    let fiat = Object.values(FiatData);\n    fiat.findIndex((val) => val === value) != -1\n      ? (object = FiatData)\n      : (object = CryptoData);\n    return Object.keys(object).find((key) => object[key] === value);\n  }\n\n  function onTextChanged(e) {\n    const value = e.target.value;\n    if (value.length > 0) {\n      // Escape bad chars\n      const escapeChars = value.replace(/[-\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n      // Split input into an array of substrings\n      const words = escapeChars.split(\" \");\n      // Regex (?=.*words). Will match next word if previous matches.\n      const allWords = words.join(\",\");\n      const searchInput =\n        words.length === 1\n          ? words\n          : \"(?=.*\" + allWords.replace(new RegExp(\",\", \"g\"), \")(?=.*\") + \")\";\n      const regex = new RegExp(searchInput, \"i\");\n      setSuggestions(allValues.sort().filter((val) => val.match(regex)));\n    } else {\n      setSuggestions([]);\n    }\n  }\n\n  function clickSuggestion(suggestion) {\n    setSuggestions([]);\n    currentSuggestion.current.value = suggestion;\n  }\n\n  useEffect(() => {\n    whichCurr == 20\n      ? setAllValues(Object.values(FiatData))\n      : setAllValues(Object.values(CryptoData));\n  }, [whichCurr]);\n\n  function toggleRadio() {\n    setFrom(!from);\n    setTo(!to);\n  }\n\n  const handleSelectChange = (event) => {\n    setWhichCurr(event.target.value);\n  };\n\n  function convertValue() {\n    if (fromText.current.value === \"\") {\n      setToText(0);\n    } else {\n      setToText(exchangeRate * fromText.current.value);\n    }\n  }\n\n  return (\n    <>\n      <NavBar handleSelectChange={handleSelectChange} whichCurr={whichCurr} />\n      <div className=\"app\">\n        <div className=\"app-container\">\n          <div className=\"app-wrapper\">\n            <div className=\"convert\">\n              <div className=\"convert-container\">\n                <label>\n                  <input\n                    type=\"radio\"\n                    name=\"convert\"\n                    checked={from}\n                    onChange={toggleRadio}\n                  />\n                  {pickedFrom}\n                  <input ref={fromText} type=\"text\" onChange={convertValue} />\n                </label>\n                <label>\n                  <input\n                    type=\"radio\"\n                    name=\"convert\"\n                    checked={to}\n                    onChange={toggleRadio}\n                  />\n                  {pickedTo}\n                </label>\n              </div>\n            </div>\n            <div className=\"search_container\">\n              <input\n                ref={currentSuggestion}\n                className=\"search\"\n                type=\"text\"\n                placeholder=\"Search\"\n                onChange={onTextChanged}\n              />\n              <div className={suggestions.length > 0 ? \"container\" : null}>\n                <RenderSuggestions\n                  suggestions={suggestions}\n                  clickSuggestion={clickSuggestion}\n                />\n              </div>\n              <div className={suggestions.length > 0 ? \"hide-button\" : null}>\n                <div className=\"button-wrapper\">\n                  <button\n                    onClick={() => {\n                      if (from) {\n                        setPickedFrom(currentSuggestion.current.value);\n                        currentSuggestion.current.value = \"\";\n                      } else {\n                        setPickedTo(currentSuggestion.current.value);\n                        currentSuggestion.current.value = \"\";\n                      }\n                    }}\n                    className=\"button-css\"\n                  >\n                    Add\n                  </button>\n                </div>\n              </div>\n            </div>\n            <div className=\"output-container\">\n              <h1 className=\"output\">{toText}</h1>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}